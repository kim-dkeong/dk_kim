{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled4.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Uj25JrKBjRQE"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dAdreGAIjSfi"
      },
      "source": [
        "# chapter 07. 딥러닝을 시작합니다"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "p-ooWP03jVoc"
      },
      "source": [
        "## 07-1 인공 신경망"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QXCAMO_-hPBY",
        "outputId": "ded01644-6ef3-44d7-f950-3672a3880075"
      },
      "source": [
        "# 이번에 사용할 데이터셋: 패션 MNIST 데이터셋 사용\n",
        "# 딥러닝 라이브러리에서 이 데이터를 가져올 수 있는 도구 제공\n",
        "# tenserflow 사용해서 데이터 불러오기\n",
        "from tensorflow import keras\n",
        "(train_input, train_target), (test_input, test_target) = \\\n",
        "keras.datasets.fashion_mnist.load_data()"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-idx1-ubyte.gz\n",
            "32768/29515 [=================================] - 0s 0us/step\n",
            "40960/29515 [=========================================] - 0s 0us/step\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-idx3-ubyte.gz\n",
            "26427392/26421880 [==============================] - 0s 0us/step\n",
            "26435584/26421880 [==============================] - 0s 0us/step\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-idx1-ubyte.gz\n",
            "16384/5148 [===============================================================================================] - 0s 0us/step\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-idx3-ubyte.gz\n",
            "4423680/4422102 [==============================] - 0s 0us/step\n",
            "4431872/4422102 [==============================] - 0s 0us/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lGIizbkRhOtm",
        "outputId": "b28686b4-5b92-4f01-d16b-6a5f88ba4139"
      },
      "source": [
        "# 데이터의 크기 확인\n",
        "print(train_input.shape, train_target.shape)\n",
        "# 훈련 데이터는 60000개의 이미지로 이루어져있고 28x28 크기\n",
        "# 타겟 데이터도 60000개의 원소 있는 1차원 배열"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(60000, 28, 28) (60000,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rufgy-x2iLu2",
        "outputId": "b9ec7fb1-9447-4038-b56f-f8add9acb99a"
      },
      "source": [
        "# 테스트 세트의 크기 확인\n",
        "print(test_input.shape, test_target.shape)"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(10000, 28, 28) (10000,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 78
        },
        "id": "DCk7IywXiLqq",
        "outputId": "00dfd953-b1ac-4f78-8c72-b40c73aee4cd"
      },
      "source": [
        "# 몇 개의 샘플 그림으로 출력해보기\n",
        "import matplotlib.pyplot as plt\n",
        "fig, axs = plt.subplots(1,10, figsize = (10,10))\n",
        "for i in range(10):\n",
        "  axs[i].imshow(train_input[i], cmap='gray_r')\n",
        "  axs[i].axis('off')\n",
        "plt.show()"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x720 with 10 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aoSXrYz1iLmz",
        "outputId": "fa5ba7cf-bba1-4e95-9974-aba815ef1119"
      },
      "source": [
        "# 10개 샘플의 타깃값을 리스트로 만든 후 출력하기\n",
        "print([train_target[i] for i in range(10)])"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[9, 0, 0, 3, 0, 2, 7, 2, 5, 5]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c3DHEQcNi8Qc",
        "outputId": "ef7fc1c7-53d0-4e3c-cd26-69da6c02cfc7"
      },
      "source": [
        "# 레이블 당 샘플 개수 확인하기\n",
        "import numpy as np\n",
        "print(np.unique(train_target, return_counts = True))"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], dtype=uint8), array([6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000]))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZZMUY6M7jZxY"
      },
      "source": [
        "### 로지스틱 회귀로 패션 아이템 분류하기"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "F7aKMTJvi8LN"
      },
      "source": [
        "# 전체 데이터를 한꺼번에 사용해서 모델을 훈련하는 것보다 샘플을 하나씩 꺼내서 모델을 훈련하는 방법이 더 효율적으로 보임\n",
        "# 확률적 경사하강법 이용하기!"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EL2x2GCni8Ih",
        "outputId": "338bf636-5bd4-43ec-d158-d6b097e93e32"
      },
      "source": [
        "# reshape 메서드를 이용해 2차원 배열 -> 1차원 배열\n",
        "train_scaled = train_input / 255.0\n",
        "train_scaled = train_scaled.reshape(-1, 28*28)\n",
        "print(train_scaled.shape)"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(60000, 784)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zdoQkqAOi8Gd",
        "outputId": "c1a688ac-8d41-4324-c867-f61d6ff1b66d"
      },
      "source": [
        "# 교차 검증으로 성능 확인하기\n",
        "from sklearn.model_selection import cross_validate\n",
        "from sklearn.linear_model import SGDClassifier\n",
        "sc = SGDClassifier(loss = 'log', max_iter = 5, random_state = 42)\n",
        "scores = cross_validate(sc, train_scaled, train_target, n_jobs = -1)\n",
        "print(np.mean(scores['test_score']))\n",
        "# 점수가 생각보다 엄청 높게 나오지는 않음"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.8195666666666668\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kLnROvm-i8D6"
      },
      "source": [
        "# 로지스틱 회귀를 진행해 봤을 때\n",
        "# 각각의 레이블에 대한 함수가 나옴\n",
        "# 레이블에 대한 함수 길이가 길어짐, 함수 개수도 많음"
      ],
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1eYrasmZn9i1"
      },
      "source": [
        "## 인공 신경망"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GML2xXGpi8Bm"
      },
      "source": [
        "# 인공 신경망이란?\n",
        "# 가장 기본적인 인공 신경망은 확률적 경사 하강법을 사용하는 로지스틱 회귀와 동일하다\n",
        "# 아까 수행한 로지스틱 회귀의 점수가 그렇게 좋지는 않았는데...?\n",
        "# 텐서플로 라이브러리를 이용해서 인공 신경망 모델을 만들어서 성능을 높여보자!"
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "78apK79di7_j"
      },
      "source": [
        "import tensorflow as tf\n",
        "# 비교적 최근에 나온 라이브러리라 그런가 주피터에 없음. 따로 깔아야함. 디게 복잡함......\n",
        "# 딥러닝 라이브러리는 GPU를 사용해 인공신경망 훈련한다\n",
        "# 연산이 많이 수행되는 인공 신경망에 유리"
      ],
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3dOhxVoUi78q"
      },
      "source": [
        "from tensorflow import keras"
      ],
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Lc7Gg3ZohAxm"
      },
      "source": [
        "## 인공 신경망으로 모델 만들기"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PwLipActpJZl"
      },
      "source": [
        "# 아까 로지스틱 회귀할 때 사용했던 훈련 데이터 그대로 사용\n",
        "# 로지스틱 회귀와 인공 신경망의 차이점 : 로지스틱 회귀는 교차 검증 사용, 인공 신경망은 교차 검증 사용x\n",
        "from sklearn.model_selection import train_test_split\n",
        "train_scaled, val_scaled, train_target, val_target = train_test_split(train_scaled, train_target, test_size = 0.2, random_state = 42)"
      ],
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9LTKJMtNpn6y",
        "outputId": "2ca3a293-12d2-4157-dbff-3674879b3659"
      },
      "source": [
        "# 훈련 세트에서 20%를 검증 세트로 덜어냄\n",
        "print(train_scaled.shape, train_target.shape)"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(48000, 784) (48000,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M_izQD08puft",
        "outputId": "9aa40210-20e0-4213-da6b-6f4743827ed6"
      },
      "source": [
        "print(val_scaled.shape, val_target.shape)"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(12000, 784) (12000,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nZk6jJoRp0QH"
      },
      "source": [
        "### 훈련 순서: 훈련세트로 모델 만들고 검증 세트로 평가"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gfRolDs8pxvi"
      },
      "source": [
        "# 밀집층 만들기\n",
        "# 밀집층 : 픽셀과 뉴런이 모두 연결된 선\n",
        "dense = keras.layers.Dense(10, activation = 'softmax', input_shape=(784,))"
      ],
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Zp56hdHhqWdP"
      },
      "source": [
        "# 앞에서 만든 밀집층을 가지고 신경망 모델 만들기\n",
        "# keras Sequential class 이용\n",
        "model = keras.Sequential(dense)"
      ],
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UOu7K-F5qh0q"
      },
      "source": [
        "## 인공 신경망으로 패션 아이템 분류하기"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OgYm90-LquI1"
      },
      "source": [
        "### 케라스 모델의 설정 단계\n",
        "#### model 객체의 compile() method에서 수행\n",
        "#### 손실함수 반드시 지정하기\n",
        "#### 훈련 과정에서 계산하고 싶은 측정값 지정"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Mhv2oleIqd3T"
      },
      "source": [
        "model.compile(loss = 'sparse_categorical_crossentropy', metrics = 'accuracy')\n",
        "# sparse_categorical_crossentropy \n",
        "# 1.(다중 분류에서 크로스 엔트로피 손실함수 이용 -> categorical_crossentropy)\n",
        "# 2. sparse(희소행렬) = 행렬값이 대부분 0인 경우\n",
        "# 다중분류 수행시 각 클래스에 대한 확률이 모두 출력 -> 타깃에 해당하는 확률만 남겨놓기 위해서 나머지 확률에 0 곱하기\n",
        "# one-hot encoding : 타깃값을 해당 클래스만 1이고 나머지 모두 0인 배열로 만드는 것"
      ],
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q-uF4J7Orsgw",
        "outputId": "7956b648-5fab-4a52-cd88-52fd9f86fcd8"
      },
      "source": [
        "print(train_target[:10])\n",
        "# 정수로 된 타깃값은 원-핫 인코딩으로 바꾸지 않는다"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[7 3 5 8 6 9 3 3 9 9]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cLlDY-Iqs_Ap"
      },
      "source": [
        "### 모델 훈련하기"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PERuGJ7zswsR",
        "outputId": "1717c8b8-ab83-4e31-c456-ac8e71d5ab4d"
      },
      "source": [
        "# using fit() method\n",
        "# train, target 지정 -> 에포크 횟수 지정\n",
        "model.fit(train_scaled, train_target, epochs = 5)"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "1500/1500 [==============================] - 3s 1ms/step - loss: 0.6064 - accuracy: 0.7954\n",
            "Epoch 2/5\n",
            "1500/1500 [==============================] - 2s 1ms/step - loss: 0.4789 - accuracy: 0.8385\n",
            "Epoch 3/5\n",
            "1500/1500 [==============================] - 2s 1ms/step - loss: 0.4555 - accuracy: 0.8482\n",
            "Epoch 4/5\n",
            "1500/1500 [==============================] - 2s 1ms/step - loss: 0.4453 - accuracy: 0.8514\n",
            "Epoch 5/5\n",
            "1500/1500 [==============================] - 2s 1ms/step - loss: 0.4374 - accuracy: 0.8557\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7ff819359b90>"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZGd_ikFRtdCc"
      },
      "source": [
        "#### 훈련세트 훈련 결과 5번 반복시 점점 정확도 증가한다는 것을 볼 수 있음"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-0Yr9T4gtiWo"
      },
      "source": [
        "### 검증 세트에서 모델 성능 확인하기"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aKGr1B0AtPae",
        "outputId": "695e3ea2-b79e-4bed-b2e7-5e9d8da92728"
      },
      "source": [
        "# evaluate() method\n",
        "model.evaluate(val_scaled, val_target)"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "375/375 [==============================] - 1s 1ms/step - loss: 0.4604 - accuracy: 0.8475\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.46036121249198914, 0.8475000262260437]"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wdHDC7bZt0pr"
      },
      "source": [
        "## 07-2 심층 신경망"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ny17P3jQua-p"
      },
      "source": [
        "### 2개의 층"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gysVA6gXtsmj"
      },
      "source": [
        "from tensorflow import keras\n",
        "(train_input, train_target), (test_input, test_target) = \\\n",
        "keras.datasets.fashion_mnist.load_data()"
      ],
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NaPEl7eXumEz"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "train_scaled = train_input / 255.0\n",
        "train_scaled = train_scaled.reshape(-1, 28*28)\n",
        "train_scaled, val_scaled, train_target, val_target = train_test_split(train_scaled, train_target, test_size = 0.2, random_state = 42)"
      ],
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-8PwvP3ivDup"
      },
      "source": [
        "# 은닉층: 입력층과 출력층 사이에 밀집층 추가\n",
        "# 은닉층의 활성화 함수는 비교적 자유롭다\n",
        "# 주로 사용하는 활성화 함수는 시그모이드 함수이다"
      ],
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aES9usSvvaDV"
      },
      "source": [
        "### 은닉층에 활성화 함수를 적용하는 이유?\n",
        "#### 은닉층에서 선형적인 산술계산만 한다면 수행역할이 없어진다\n",
        "#### 다음 층의 계산과 단순히 합쳐질 수도 있음"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oc0knGuavZeq"
      },
      "source": [
        "dense1 = keras.layers.Dense(100, activation = 'sigmoid', input_shape=(784,)) #은닉층\n",
        "dense2 = keras.layers.Dense(10, activation = 'softmax') # 출력층\n",
        "# 출력틍의 뉴런보다는 은닉층의 개수가 많게 만들어야한다!"
      ],
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iQDAI1j-wUPb"
      },
      "source": [
        "## 심층 신경망 만들기"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7JUeh4h1wLIx"
      },
      "source": [
        "model = keras.Sequential([dense1, dense2])\n",
        "# 인공 신경망의 강력한 성능은 층을 추가해 입력 데이터에 대해 연속적인 학습을 진행하는 능력에서 나온다"
      ],
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Iqk_1-98wZyM",
        "outputId": "eceb856d-c05a-4be7-bd43-d6ec573f8565"
      },
      "source": [
        "model.summary()"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_1\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "dense_3 (Dense)              (None, 100)               78500     \n",
            "_________________________________________________________________\n",
            "dense_4 (Dense)              (None, 10)                1010      \n",
            "=================================================================\n",
            "Total params: 79,510\n",
            "Trainable params: 79,510\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mGVX_nR00cmb"
      },
      "source": [
        "## 층을 추가하는 다른 방법"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "E75wDQsk0VOL"
      },
      "source": [
        "# 1. sequential 클래스의 생성자 안에서 바로 dense 클래스 객체 생성\n",
        "model = keras.Sequential([\n",
        "   keras.layers.Dense(100, activation = 'sigmoid', input_shape=(784,),name = 'hidden'),\n",
        "   keras.layers.Dense(10, activation = 'softmax', name = 'output')                       \n",
        "], name = '패션 MNIST 모델')"
      ],
      "execution_count": 40,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BBTfNRsB0-fV",
        "outputId": "241f6841-60ce-46c8-e323-39dae205c4c1"
      },
      "source": [
        "model.summary()"
      ],
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"패션 MNIST 모델\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "hidden (Dense)               (None, 100)               78500     \n",
            "_________________________________________________________________\n",
            "output (Dense)               (None, 10)                1010      \n",
            "=================================================================\n",
            "Total params: 79,510\n",
            "Trainable params: 79,510\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FIMPYb2C1AG0"
      },
      "source": [
        "# 2. Sequential class 객체를 만들고 add()를 호출해 층을 추가\n",
        "model = keras.Sequential()\n",
        "model.add(keras.layers.Dense(100, activation = 'sigmoid', input_shape = (784,)))\n",
        "model.add(keras.layers.Dense(10, activation = 'softmax'))"
      ],
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8VtJCK0G1bLL",
        "outputId": "df3c202d-6622-4f85-db21-f8f239743be8"
      },
      "source": [
        "model.summary()"
      ],
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_2\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "dense_5 (Dense)              (None, 100)               78500     \n",
            "_________________________________________________________________\n",
            "dense_6 (Dense)              (None, 10)                1010      \n",
            "=================================================================\n",
            "Total params: 79,510\n",
            "Trainable params: 79,510\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uWEFp1tL1c3U",
        "outputId": "0b58b2b7-36f4-46d5-95d5-8bfb78328b0c"
      },
      "source": [
        "# train model\n",
        "model.compile(loss = 'sparse_categorical_crossentropy', metrics = 'accuracy')\n",
        "model.fit(train_scaled, train_target, epochs = 5)"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "1500/1500 [==============================] - 4s 2ms/step - loss: 0.5669 - accuracy: 0.8073\n",
            "Epoch 2/5\n",
            "1500/1500 [==============================] - 4s 3ms/step - loss: 0.4096 - accuracy: 0.8513\n",
            "Epoch 3/5\n",
            "1500/1500 [==============================] - 4s 2ms/step - loss: 0.3753 - accuracy: 0.8630\n",
            "Epoch 4/5\n",
            "1500/1500 [==============================] - 4s 2ms/step - loss: 0.3520 - accuracy: 0.8721\n",
            "Epoch 5/5\n",
            "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3351 - accuracy: 0.8786\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7ff815af5110>"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YCRo68ei158N"
      },
      "source": [
        "0.8557 -> 0.8766: 성능 향상"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YYkwj6a31-wz"
      },
      "source": [
        "## 렐루 함수"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sLVzPalm2EE9"
      },
      "source": [
        "### 시그모이드 함수의 단점?\n",
        "#### 끝으로 갈수록 그래프가 누워있다\n",
        "#### 올바른 출력을 만드는데 신속하게 대응하지 못함"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mjJZd5S92SyX"
      },
      "source": [
        "### 렐루함수\n",
        "#### max(0,z)\n",
        "#### 이미지 처리에 좋은 성능"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EQVqyMi41uel"
      },
      "source": [
        "# flatten 층 제공\n",
        "model = keras.Sequential()\n",
        "model.add(keras.layers.Flatten(input_shape=(28,28)))\n",
        "model.add(keras.layers.Dense(100, activation = 'relu'))\n",
        "model.add(keras.layers.Dense(10, activation = 'softmax'))"
      ],
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "urQ0mxpG24py",
        "outputId": "d0e392b3-d309-466f-a17d-08f62c6a1e30"
      },
      "source": [
        "model.summary()"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_3\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "flatten (Flatten)            (None, 784)               0         \n",
            "_________________________________________________________________\n",
            "dense_7 (Dense)              (None, 100)               78500     \n",
            "_________________________________________________________________\n",
            "dense_8 (Dense)              (None, 10)                1010      \n",
            "=================================================================\n",
            "Total params: 79,510\n",
            "Trainable params: 79,510\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dsIvokNx3CNc"
      },
      "source": [
        "# train model!\n",
        "(train_input, train_target),(test_input, test_target) = \\\n",
        "keras.datasets.fashion_mnist.load_data()\n",
        "train_scaled = train_input / 255.0\n",
        "train_scaled ,val_scaled, train_target, val_target = train_test_split(train_scaled, train_target, test_size = 0.2, random_state = 42)"
      ],
      "execution_count": 48,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IHxH4jJ83az0",
        "outputId": "567f8dfd-ad9f-4647-add4-b9df60003c02"
      },
      "source": [
        "model.compile(loss = 'sparse_categorical_crossentropy', metrics = 'accuracy')\n",
        "model.fit(train_scaled, train_target, epochs = 5)"
      ],
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "1500/1500 [==============================] - 4s 2ms/step - loss: 0.5292 - accuracy: 0.8138\n",
            "Epoch 2/5\n",
            "1500/1500 [==============================] - 4s 2ms/step - loss: 0.3888 - accuracy: 0.8601\n",
            "Epoch 3/5\n",
            "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3540 - accuracy: 0.8730\n",
            "Epoch 4/5\n",
            "1500/1500 [==============================] - 4s 2ms/step - loss: 0.3324 - accuracy: 0.8798\n",
            "Epoch 5/5\n",
            "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3178 - accuracy: 0.8864\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7ff818fa8350>"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dFNEgdPE3k8j",
        "outputId": "c2a3642c-ea53-4741-a263-be344f85c6dc"
      },
      "source": [
        "model.evaluate(val_scaled, val_target)"
      ],
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "375/375 [==============================] - 1s 1ms/step - loss: 0.3950 - accuracy: 0.8627\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.39500826597213745, 0.862666666507721]"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IQ_znojY3vRn"
      },
      "source": [
        "## 옵티마이저"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cot2mhMQ3tEr"
      },
      "source": [
        "# 옵티마이저 : 케라스에서 다양한 종류의 경사 하강법 알고리즘 제공\n",
        "# 1. 확률적 경사하강법(SGD)\n",
        "# 미니배치 사용\n",
        "sgd = keras.optimizers.SGD()\n",
        "model.compile(optimizer = 'sgd', loss = 'sparse_categorical_crossentropy', metrics = 'accuracy') "
      ],
      "execution_count": 57,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TOvGUFim4QDv"
      },
      "source": [
        "# 2. 모멘텀 최적화\n",
        "# 이전의 그래디언트를 가속도 처럼 사용 (보통 0.9 이상 지정)\n",
        "sgd = keras.optimizers.SGD(momentum = 0.9)"
      ],
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NspLOgO56dDK"
      },
      "source": [
        "# 3. 네스테로프 모멘텀 최적화\n",
        "# Nesterov 기본값 False -> True\n",
        "sgd = keras.optimizers.SGD(momentum = 0.9, nesterov = True)"
      ],
      "execution_count": 56,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "90I45sHu6oT-"
      },
      "source": [
        "# 적응적 학습률: 모델이 최적점에 가까이 갈수록 학습률 낮출 수 있음\n",
        "# Adagard, RMSprop 주로 사용\n",
        "# 3. Adagrad\n",
        "adagrad = keras.optimizers.Adagrad()\n",
        "model.compile(optimizer = adagrad, loss = 'sparse_catorical_crossentropy', metrics = 'accuracy')"
      ],
      "execution_count": 59,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "unGd3_OJ7KY7"
      },
      "source": [
        "# 4. RMSprop\n",
        "rmsprop = keras.optimizers.RMSprop()\n",
        "model.compile(optimizer = rmsprop, loss = 'sparse_catorical_crossentropy', metrics = 'accuracy')"
      ],
      "execution_count": 61,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "G0GXsJng7Vzh"
      },
      "source": [
        "# optimizer 추가해서 다시 훈련하기\n",
        "model = keras.Sequential()\n",
        "model.add(keras.layers.Flatten(input_shape=(28,28)))\n",
        "model.add(keras.layers.Dense(100, activation = 'relu'))\n",
        "model.add(keras.layers.Dense(10, activation = 'softmax'))"
      ],
      "execution_count": 62,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N0HPg6ek7eB1",
        "outputId": "eb4f1f56-56d1-48f2-eb4b-e76f611ee46c"
      },
      "source": [
        "model.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = 'accuracy')\n",
        "model.fit(train_scaled, train_target, epochs = 5)"
      ],
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "1500/1500 [==============================] - 3s 2ms/step - loss: 0.5220 - accuracy: 0.8176\n",
            "Epoch 2/5\n",
            "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3925 - accuracy: 0.8575\n",
            "Epoch 3/5\n",
            "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3516 - accuracy: 0.8723\n",
            "Epoch 4/5\n",
            "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3265 - accuracy: 0.8804\n",
            "Epoch 5/5\n",
            "1500/1500 [==============================] - 3s 2ms/step - loss: 0.3086 - accuracy: 0.8860\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7ff818e3d910>"
            ]
          },
          "metadata": {},
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aeN72KKR7rzy",
        "outputId": "c9f0667a-48e3-43d2-b88c-ae0ae2a7c126"
      },
      "source": [
        "model.evaluate(val_scaled, val_target)"
      ],
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "375/375 [==============================] - 1s 1ms/step - loss: 0.3305 - accuracy: 0.8799\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.3305398225784302, 0.8799166679382324]"
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8IPkkzjVDHH6"
      },
      "source": [
        "## 07-3 신경망 모델 훈련"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KllIOjy6DGrw"
      },
      "source": [
        "### 손실곡선"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wqf9npUv7yZV",
        "outputId": "e26e6bbe-12eb-4268-c63d-0d86e50efd65"
      },
      "source": [
        "from tensorflow import keras\n",
        "from sklearn.model_selection import train_test_split\n",
        "(train_input, train_target), (test_input, test_target) = \\\n",
        "keras.datasets.fashion_mnist.load_data()\n",
        "train_scaled = train_input / 255.0\n",
        "train_scaled, val_scaled, train_target, val_target = train_test_split(train_scaled, train_target, test_size = 0.2, random_state = 42)"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-idx1-ubyte.gz\n",
            "32768/29515 [=================================] - 0s 0us/step\n",
            "40960/29515 [=========================================] - 0s 0us/step\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-idx3-ubyte.gz\n",
            "26427392/26421880 [==============================] - 0s 0us/step\n",
            "26435584/26421880 [==============================] - 0s 0us/step\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-idx1-ubyte.gz\n",
            "16384/5148 [===============================================================================================] - 0s 0us/step\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-idx3-ubyte.gz\n",
            "4423680/4422102 [==============================] - 0s 0us/step\n",
            "4431872/4422102 [==============================] - 0s 0us/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iDrf0YVTD-Xt"
      },
      "source": [
        "# 모델을 만드는 간단한 함수 정의\n",
        "def model_fn(a_layer = None):\n",
        "  model = keras.Sequential()\n",
        "  model.add(keras.layers.Flatten(input_shape = (28,28)))\n",
        "  model.add(keras.layers.Dense(100, activation = 'relu'))\n",
        "  if a_layer:\n",
        "    model.add(a_layer)\n",
        "  model.add(keras.layers.Dense(10, activation='softmax'))\n",
        "  return model\n",
        "  # if의 역할: 케라스 층 추가시 은닉층 뒤에 층 하나 더 추가"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wSmVznd2Fvow",
        "outputId": "398492c3-36f2-4b57-82fc-0ca359a3729b"
      },
      "source": [
        "model = model_fn()\n",
        "model.summary()"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "flatten (Flatten)            (None, 784)               0         \n",
            "_________________________________________________________________\n",
            "dense (Dense)                (None, 100)               78500     \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 10)                1010      \n",
            "=================================================================\n",
            "Total params: 79,510\n",
            "Trainable params: 79,510\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DeWoI1ePGCd-"
      },
      "source": [
        "model.compile(loss='sparse_categorical_crossentropy', metrics = 'accuracy')\n",
        "history = model.fit(train_scaled, train_target, epochs = 5, verbose = 0)\n",
        "# verbose = 훈련 과정 출력 조절"
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CgCXWpNoGfJ1",
        "outputId": "b1861e5c-ff42-44ea-acd5-1059a4747f25"
      },
      "source": [
        "print(history.history.keys())"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "dict_keys(['loss', 'accuracy'])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "xEegOE_3Gpno",
        "outputId": "f81e563e-481b-4b96-cd5d-5db6f30d6acb"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.plot(history.history['loss'])\n",
        "plt.xlabel('epoch')\n",
        "plt.ylabel('loss')\n",
        "plt.show()"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "AR9DvO6fHCPK",
        "outputId": "8f209568-4e68-4217-827a-42660b215ef9"
      },
      "source": [
        "# accuracy\n",
        "plt.plot(history.history['accuracy'])\n",
        "plt.xlabel('epoch')\n",
        "plt.ylabel('accuracy')\n",
        "plt.show()"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "OAC5U9hcHLu9",
        "outputId": "10abeb07-d52e-4c7d-e4aa-b8d20b15a2f0"
      },
      "source": [
        "# epoch 20\n",
        "model = model_fn()\n",
        "model.compile(loss = 'sparse_categorical_crossentropy', metrics = 'accuracy')\n",
        "history = model.fit(train_scaled, train_target, epochs = 20, verbose = 0)\n",
        "plt.plot(history.history['loss'])\n",
        "plt.xlabel('epoch')\n",
        "plt.ylabel('loss')\n",
        "plt.show()"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YyWXMgBkHmbh"
      },
      "source": [
        "## 검증손실"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1cUX3c-VHjHV"
      },
      "source": [
        "# epoch 마다 검증 손실 계산\n",
        "model = model_fn()\n",
        "model.compile(loss = 'sparse_categorical_crossentropy', metrics = 'accuracy')\n",
        "history = model.fit(train_scaled, train_target, epochs = 20, verbose = 0, validation_data = (val_scaled, val_target))"
      ],
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wWYA_M1rIGYL",
        "outputId": "c067763d-447a-4e64-aac2-41ecf1a8f0fd"
      },
      "source": [
        "print(history.history.keys())"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "dict_keys(['loss', 'accuracy', 'val_loss', 'val_accuracy'])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "iNtvYvXuIWxn",
        "outputId": "98839651-9e23-4e47-9661-42dfb4dfea91"
      },
      "source": [
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])\n",
        "plt.legend(['train','val'])\n",
        "# 과대적합 모델이 만들어진다"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f6d8e8a7d90>"
            ]
          },
          "metadata": {},
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "rwH6Od5wIdw6",
        "outputId": "c652b3b6-4ec1-43d7-91cc-dd4741812833"
      },
      "source": [
        "# use optimizer\n",
        "model = model_fn()\n",
        "model.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = 'accuracy')\n",
        "history = model.fit(train_scaled, train_target, epochs = 20, verbose = 0, validation_data = (val_scaled, val_target))\n",
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f6d8534fb50>]"
            ]
          },
          "metadata": {},
          "execution_count": 22
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ODIJsYJmJS_x"
      },
      "source": [
        "## 드롭아웃"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0lXUoUvVJWmH"
      },
      "source": [
        "#### 훈련 과정에서 층에 있는 일부 뉴런을 랜덤하게 꺼서 과대적합을 막는다."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ObZATVQKJgZh"
      },
      "source": [
        "#### 드롭아웃이 과대적합을 막는 이유?\n",
        "#### 특정 뉴런에 과대하게 의존하는 것으 줄일 수 있고 모든 입력에 대해 주의를 기울여야함 -> 더 안정적인 예측"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x4sk13hvI3jH",
        "outputId": "24fd2de1-2179-421c-802c-df0d7c2da3a0"
      },
      "source": [
        "model = model_fn(keras.layers.Dropout(0.3))\n",
        "model.summary()"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_7\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "flatten_7 (Flatten)          (None, 784)               0         \n",
            "_________________________________________________________________\n",
            "dense_14 (Dense)             (None, 100)               78500     \n",
            "_________________________________________________________________\n",
            "dropout_1 (Dropout)          (None, 100)               0         \n",
            "_________________________________________________________________\n",
            "dense_15 (Dense)             (None, 10)                1010      \n",
            "=================================================================\n",
            "Total params: 79,510\n",
            "Trainable params: 79,510\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "Y_Urr4uxJ40p",
        "outputId": "543c3b6e-f0e9-4b5a-e7d6-b3e8cece7711"
      },
      "source": [
        "model.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = 'accuracy')\n",
        "history = model.fit(train_scaled, train_target, epochs = 20, verbose = 0, validation_data = (val_scaled, val_target))\n",
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])\n",
        "plt.legend(['train','val'])"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f6d8ea59350>"
            ]
          },
          "metadata": {},
          "execution_count": 26
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WXmqqTBDKZK-"
      },
      "source": [
        "## 모델 저장과 복원"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yGZuoOhzKV9Q"
      },
      "source": [
        "model = model_fn(keras.layers.Dropout(0.3))\n",
        "model.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = 'accuracy')\n",
        "history = model.fit(train_scaled, train_target, epochs = 10, verbose = 0, validation_data = (val_scaled, val_target))"
      ],
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ngRc6KASKvhZ"
      },
      "source": [
        "model.save_weights('model-weights.h5')"
      ],
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EM2V4HepLG8W"
      },
      "source": [
        "model.save('model-whole.h5')"
      ],
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iKZOLHCbK5om",
        "outputId": "b0fc9a31-3a27-485d-8205-1e779096f6e7"
      },
      "source": [
        "# check\n",
        "!ls -al *.h5"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-rw-r--r-- 1 root root 981736 Oct 31 07:07 model-weights.h5\n",
            "-rw-r--r-- 1 root root 981736 Oct 31 07:07 model-whole.h5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CXYS1XIDLA66"
      },
      "source": [
        "# 훈련하지 않은 새로운 모델을 만들고 model-weights.h5 파일에서 훈련된 모델 파라미터 읽어서 사용\n",
        "# model-whole.h5 파일에서 새로운 모델 만들어 사용\n",
        "model = model_fn(keras.layers.Dropout(0.3))\n",
        "model.load_weights('model-weights.h5')"
      ],
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h_vKIv2bLgzR",
        "outputId": "a294be99-9ddd-4edc-b768-3ddde6c10fb9"
      },
      "source": [
        "# 검증 정확도 확인\n",
        "import numpy as np\n",
        "val_labels = np.argmax(model.predict(val_scaled), axis = -1)\n",
        "print(np.mean(val_labels == val_target))"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.8821666666666667\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5wJpMlKDLtxt",
        "outputId": "1e364f20-b6f9-4444-f7b6-9663fd0d472c"
      },
      "source": [
        "model = keras.models.load_model('model-whole.h5')\n",
        "model.evaluate(val_scaled, val_target)\n"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "375/375 [==============================] - 1s 1ms/step - loss: 0.3251 - accuracy: 0.8822\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.32505229115486145, 0.8821666836738586]"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qISgZcXHMECn"
      },
      "source": [
        "이때까지의 과정: 20번 에포크 동안 모델 훈련해 검증 점수 상승 지점 확인\n",
        "-> 과대적합 안될 정도로 다시 훈련\n",
        "/그렇다면 한번에 끝낼 수 있는 방법은 없는걸까?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dF7O6gHUMTes"
      },
      "source": [
        "## 콜백"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X3RgDh1QL7w6",
        "outputId": "3d7b63d3-4735-48e4-ef69-870615b3be2f"
      },
      "source": [
        "# 최상의 검증 점수를 만드는 모델 저장\n",
        "model = model_fn(keras.layers.Dropout(0.3))\n",
        "model.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = 'accuracy')\n",
        "checkpoint_cb = keras.callbacks.ModelCheckpoint('best-model.h5')\n",
        "model.fit(train_scaled, train_target, epochs = 20, verbose = 0, validation_data = (val_scaled, val_target), callbacks = [checkpoint_cb])"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f6d8edace90>"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5iRkuQPjMutA",
        "outputId": "872ed762-c4d5-497d-ac8d-b692f7d3b800"
      },
      "source": [
        "model = keras.models.load_model('best-model.h5')\n",
        "model.evaluate(val_scaled, val_target)"
      ],
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "375/375 [==============================] - 1s 1ms/step - loss: 0.3317 - accuracy: 0.8850\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.3316991329193115, 0.8849999904632568]"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "z-kPjoDUM6uo"
      },
      "source": [
        "# earlystopping callback\n",
        "model = model_fn(keras.layers.Dropout(0.3))\n",
        "model.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = 'accuracy')\n",
        "checkpoint_cb = keras.callbacks.ModelCheckpoint('best-model.h5')\n",
        "early_stopping_cb = keras.callbacks.EarlyStopping(patience = 2, restore_best_weights = True)\n",
        "history = model.fit(train_scaled, train_target, epochs = 20, verbose = 0, validation_data = (val_scaled, val_target), callbacks = [checkpoint_cb, early_stopping_cb])"
      ],
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3dV0nfn7Nysd",
        "outputId": "1cbb49d6-3578-423a-db55-495563f110ee"
      },
      "source": [
        "print(early_stopping_cb.stopped_epoch)"
      ],
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "11\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        },
        "id": "YBcSigA_N7xi",
        "outputId": "82799c83-25a6-43c6-a302-4af241c2e736"
      },
      "source": [
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])\n",
        "plt.legend(['train','val'])"
      ],
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f6d8e96eb50>"
            ]
          },
          "metadata": {},
          "execution_count": 44
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i_5acOwfOHD3",
        "outputId": "a639e418-3fbd-4896-b6cf-6212e39da891"
      },
      "source": [
        "model.evaluate(val_scaled, val_target)"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "375/375 [==============================] - 0s 1ms/step - loss: 0.3273 - accuracy: 0.8832\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.32734715938568115, 0.8831666707992554]"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bRhJdZWxOKq8"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}